<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Modules - keep disabled" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Building blocks</stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OPEN_BROWSER" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Open Chrome browser" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebElement;

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;C:/Users/user/Downloads/chromedriver_win32/chromedriver.exe&quot;);

// Otwieranie przeglądarki Chrome i rozszerzenie na cały ekran
WebDriver driver = (WebDriver) new ChromeDriver(); 
driver.manage().window().maximize(); 

// Zapisanie strony w postaci obiektu, do którego będą się odwoływać kolejne moduły
vars.putObject(&quot;DRIVER&quot;,driver);

// Sygnał, że test wykonał się prawidłowo
return(&quot;success!&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GO_TO_WEBSITE" enabled="true">
          <stringProp name="TestPlan.comments">Opens given website</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Go to website ${current_value}" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebElement;

// Odwołanie się do obiektu z poprzedniego modułu
my_driver = vars.getObject(&quot;DRIVER&quot;);

// Przekierowanie na stronę podaną w pliku .csv
my_driver.get(&quot;${current_value}&quot;);

// Sygnał, że test wykonał się prawidłowo
return(&quot;success!&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CLOSE_BROWSER" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Close browser" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

// Odwołanie się do obiektu z poprzedniego modułu
my_driver = vars.getObject(&quot;DRIVER&quot;);

// Po 2 sekundach przeglądarka zostaje zamknięta
Thread.sleep(2000);
my_driver.quit();

// Sygnał, że test wykonał się prawidłowo
return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGIN" enabled="true">
          <stringProp name="TestPlan.comments">  Login to WordPress</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Click Log In" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

// Odwołanie się do obiektu z poprzedniego modułu
my_driver = vars.getObject(&quot;DRIVER&quot;);

WebElement clickLogIn = my_driver.findElement(By.xpath(&quot;//body[@id=&apos;wpcom-home&apos;]/header/nav/ul[2]/li[1]/a&quot;));
clickLogIn.click();
	
return(&quot;success!&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Put the e-mail and click Continue button" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

// Odwołanie się do obiektu z poprzedniego modułu
my_driver = vars.getObject(&quot;DRIVER&quot;);

WebElement emailField = my_driver.findElement(By.id(&quot;usernameOrEmail&quot;));
emailField.sendKeys(new String[] { &quot;matematyka-podst@wp.pl&quot; });

WebElement continueButton = my_driver.findElement(By.xpath(&quot;//div[@id=&apos;primary&apos;]/div/main/div/div[1]/div/form/div[1]/div[2]/button&quot;));
continueButton.click();
	
return(&quot;success!&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Put the password and click LogIn buttion" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

// Odwołanie się do obiektu z poprzedniego modułu
my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(1000);
WebElement passwordField = my_driver.findElement(By.id(&quot;password&quot;));
passwordField.sendKeys(new String[] { &quot;jmeterjestcool1&quot; });

WebElement loginButton = my_driver.findElement(By.xpath(&quot;//div[@id=&apos;primary&apos;]/div/main/div/div[1]/div/form/div[1]/div[2]/button&quot;));
loginButton.click();
	
return(&quot;success!&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LOGOUT" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Go to Profile page" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

// Odwołanie się do obiektu z poprzedniego modułu
my_driver = vars.getObject(&quot;DRIVER&quot;);

// Przejście do strony do edytowania profilu
Thread.sleep(3000);
WebElement profileButton = my_driver.findElement(By.xpath(&quot;//header[@id=&apos;header&apos;]/a[3]/span/img&quot;));
profileButton.click();

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Logout from Wordpress" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

// Odwołanie się do obiektu z poprzedniego modułu
my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(3000);
WebElement logoutButton = my_driver.findElement(By.xpath(&quot;//div[@id=&apos;secondary&apos;]/ul/div/div[2]/button&quot;));
logoutButton.click();

Thread.sleep(5000);

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ADD_COMMENT" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Go to comments page under the post" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

WebElement acceptButton = my_driver.findElement(By.xpath(&quot;//*[@id=&apos;eu-cookie-law&apos;]/form/input&quot;));
acceptButton.click();

WebElement commentLink = my_driver.findElement(By.xpath(&quot;//article[contains(@id,&apos;post&apos;)]/footer/div/span[3]/a&quot;));
commentLink.click();

WebElement commentArea = my_driver.findElement(By.xpath(&quot;//textarea[@id=&apos;comment&apos;]&quot;));
commentArea.sendKeys(new String[] { &quot;${current_value}&quot; });

Thread.sleep(3000);
WebElement emailArea = my_driver.findElement(By.xpath(&quot;//input[@id=&apos;email&apos;]&quot;));
emailArea.sendKeys(new String[] { &quot;matematyka-podst@wp.pl&quot; });

WebElement authorArea = my_driver.findElement(By.id(&quot;author&quot;));
authorArea.sendKeys(new String[] { &quot;Autor&quot; });

Thread.sleep(100);

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Submit the comment" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

WebElement commentSubmitButton = my_driver.findElement(By.id(&quot;comment-submit&quot;));
commentSubmitButton.click();

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Login to account to submit" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(3000);
WebElement passwordBeforeSubmitArea = my_driver.findElement(By.xpath(&quot;//input[@id=&apos;user_pass&apos;]&quot;));
passwordBeforeSubmitArea.sendKeys(new String[] { &quot;jmeterjestcool1&quot; });

WebElement confirmButton = my_driver.findElement(By.id(&quot;wp-submit&quot;));
confirmButton.click();
Thread.sleep(3000);

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ADD_POST" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Split multivarialbe parameter" enabled="true">
            <stringProp name="BeanShellSampler.query">
import java.util.StringTokenizer;

StringTokenizer st = new StringTokenizer(&quot;${current_value}&quot;,&quot;:&quot;);

vars.put(&quot;title&quot;,st.nextElement());
vars.put(&quot;text&quot;,st.nextElement());</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Add new post for website" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(1000);
WebElement postRedirectLink = my_driver.findElement(By.xpath(&quot;//header[@id=&apos;header&apos;]/div[1]/a&quot;));
postRedirectLink.click();

Thread.sleep(1000);
WebElement titleArea = my_driver.findElement(By.xpath(&quot;//div[@id=&apos;primary&apos;]/div/div[3]/div[2]/div/div[3]/div[2]/div/textarea&quot;));
titleArea.sendKeys(&quot;${title}&quot;);

Thread.sleep(1000);
WebElement titleArea = my_driver.findElement(By.id(&quot;tinymce&quot;));
titleArea.sendKeys(&quot;${text}&quot;);

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MY_SITE_PAGE" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Go to My Site" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(1000);
WebElement mySiteLink = my_driver.findElement(By.xpath(&quot;//*[@id=&apos;header&apos;]/a[1]&quot;));
mySiteLink.click();

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="COMMENT_OPTION" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Go to comments management" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(5000);
WebElement commentsSite = my_driver.findElement(By.xpath(&quot;//*[@id=&apos;secondary&apos;]/div/ul/div[1]/div[2]/li[2]/ul/li[4]/a&quot;));
commentsSite.click();

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If the option is Accept" enabled="true">
            <stringProp name="IfController.condition">&quot;${current_value}&quot; == &quot;Accept&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Accept the comment" enabled="true">
              <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

//WebElement spamPage = my_driver.findElement(By.xpath(&quot;//*[@id=&apos;primary&apos;]/main/div/div[1]/div[2]/div[1]/div/ul/li[4]/a&quot;));
//spamPage.click();

Thread.sleep(1000);
WebElement button = my_driver.findElement(By.xpath(&quot;//div[contains(@id,&apos;comment&apos;)]/div/div[3]/button[1]&quot;));
button.click();

Thread.sleep(3000);

return(&quot;success&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If the option is Delete" enabled="true">
            <stringProp name="IfController.condition">&quot;${current_value}&quot; == &quot;Delete&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Delete the comment" enabled="true">
              <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(1000);
WebElement button = my_driver.findElement(By.xpath(&quot;//div[contains(@id,&apos;comment&apos;)]/div/div[3]/button[3]&quot;));
button.click();

Thread.sleep(3000);

return(&quot;success&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MODIFY_VISIBILITY" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Go to Settings page" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(1000);
WebElement settingsSite = my_driver.findElement(By.xpath(&quot;//*[@id=&apos;secondary&apos;]/div/ul/div[1]/div[2]/li[4]/ul/li[4]/a&quot;));
settingsSite.click();

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If visibility is Private" enabled="true">
            <stringProp name="IfController.condition">&quot;${current_value}&quot; == &quot;Private&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Change the visibility to ${current_value}" enabled="true">
              <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Keys;

my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(2000);
WebElement privateButton = my_driver.findElement(By.xpath(&quot;//*[@id=&apos;primary&apos;]/main/div[2]/div[1]/div/div[4]/form/fieldset/div/label/input&quot;));
privateButton.click();

Thread.sleep(1500);

return(&quot;success&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If visibility is Public" enabled="true">
            <stringProp name="IfController.condition">&quot;${current_value}&quot; == &quot;Public&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Change the visibility to ${current_value}" enabled="true">
              <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Keys;

my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(2000);
WebElement publicButton = my_driver.findElement(By.xpath(&quot;//*[@id=&apos;primary&apos;]/main/div[2]/div[1]/div/div[4]/form/fieldset/label[1]/input&quot;));
publicButton.click();

Thread.sleep(1500);

return(&quot;success&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Click Save the settings button" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

WebElement saveButton = my_driver.findElement(By.xpath(&quot;//*[@id=&apos;site-privacy-settings&apos;]/div[2]/button&quot;));
saveButton.click();

Thread.sleep(2500);

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CHECK_VISIBILITY" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If visibility is Public" enabled="true">
            <stringProp name="IfController.condition">&quot;${current_value}&quot; == &quot;Public&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Check if the visibility of website was changed to ${current_value}" enabled="true">
              <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

WebElement websiteInfo = my_driver.findElement(By.xpath(&quot;//*[@id=&apos;menu-item-6&apos;]/a&quot;));
String webInfo = websiteInfo.getText();

Thread.sleep(3000);

if (webInfo.equals(&quot;Home&quot;)) {
	return(&quot;success&quot;);
} else {
	return(&quot;failure!&quot;);
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If visibility is Private" enabled="true">
            <stringProp name="IfController.condition">&quot;${current_value}&quot; == &quot;Private&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Check if the visibility of website was changed to ${current_value}" enabled="true">
              <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

WebElement websiteInfo = my_driver.findElement(By.xpath(&quot;//div[@id=&apos;login&apos;]/div/p[1]&quot;));
String webInfo = websiteInfo.getText();

Thread.sleep(3000);

if (webInfo.contains(&quot;private by its owner&quot;)) {
	return(&quot;success&quot;);
} else {
	return(&quot;failure!&quot;);
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CHECK_COMMENT" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Split multivarialbe parameter" enabled="true">
            <stringProp name="BeanShellSampler.query">
import java.util.StringTokenizer;

StringTokenizer st = new StringTokenizer(&quot;${current_value}&quot;,&quot;:&quot;);

vars.put(&quot;status&quot;,st.nextElement());
vars.put(&quot;commentText&quot;,st.nextElement());</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If the comment is accepted" enabled="true">
            <stringProp name="IfController.condition">&quot;${status}&quot; == &quot;Accepted&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Go to comments page under the post" enabled="true">
              <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

WebElement commentLink = my_driver.findElement(By.xpath(&quot;//article[contains(@id,&apos;post&apos;)]/footer/div/span[3]/a&quot;));
commentLink.click();

Thread.sleep(1000);

return(&quot;success&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Check if the comment ${commentText} is visible in website" enabled="true">
              <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

WebElement commentOnSite = my_driver.findElement(By.xpath(&quot;//*[contains(@id,&apos;div-comment&apos;)]/div[1]/p[1]&quot;));
String comment = commentOnSite.getText();

Thread.sleep(3000);

if (comment.equals(&quot;${commentText}&quot;)) {
	return(&quot;success&quot;);
} else {
	return(&quot;failure!&quot;);
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If the comment is deleted" enabled="true">
            <stringProp name="IfController.condition">&quot;${status}&quot; == &quot;Deleted&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Go to comments page under the post" enabled="true">
              <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

my_driver = vars.getObject(&quot;DRIVER&quot;);

WebElement commentLink = my_driver.findElement(By.xpath(&quot;//article[contains(@id,&apos;post&apos;)]/footer/div/span[3]/a&quot;));
commentLink.click();

Thread.sleep(1000);

return(&quot;success&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ACCEPT_BUTTON" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Click Accept! button" enabled="true">
            <stringProp name="BeanShellSampler.query">
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.JavascriptExecutor;

my_driver = vars.getObject(&quot;DRIVER&quot;);

Thread.sleep(4000);
WebElement Button = my_driver.findElement(By.xpath(&quot;//*[@id=&apos;wpcom&apos;]/div/div[4]/div[2]/button&quot;));
Button.click();

Thread.sleep(1000);

return(&quot;success&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Configure the CSV file with tests - dummy read for table headline" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:\apache-jmeter-4.0\CSVs\tests.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">testcase_name,testcase_no,S1,V1,S2,V2,S3,V3,S4,V4,S5,V5,S6,V6,S7,V7,S8,V8,S9,V9,S10,V10,S11,V11,S12,V12,S13,V13,S14,V14,S15,V15,S16,V16,S17,V17,S18,V18,S19,V19,S20,V20,S21,V21,S22,V22,S23,V23,S24,V24,S25,V25,S26,V26,S27,V27,S28,V28,S29,V29,S30,V30,S31,V31,S32,V32,S33,V33,S34,V34,S35,V35,S36,V36,S37,V37,S38,V38,S39,V39,S40,V40</stringProp>
        </CSVDataSet>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Iterate tests.csv file" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(${testcase_name} != &quot;END&quot;,)}</stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Configure the CSV file with tests" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">C:\apache-jmeter-4.0\CSVs\tests.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames">testcase_name,testcase_no,S1,V1,S2,V2,S3,V3,S4,V4,S5,V5,S6,V6,S7,V7,S8,V8,S9,V9,S10,V10,S11,V11,S12,V12,S13,V13,S14,V14,S15,V15,S16,V16,S17,V17,S18,V18,S19,V19,S20,V20,S21,V21,S22,V22,S23,V23,S24,V24,S25,V25,S26,V26,S27,V27,S28,V28,S29,V29,S30,V30,S31,V31,S32,V32,S33,V33,S34,V34,S35,V35,S36,V36,S37,V37,S38,V38,S39,V39,S40,V40</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Validate test-case name" enabled="true">
            <stringProp name="BeanShellSampler.query">
String testcase_name = &quot;${testcase_name}&quot;;

//lines that start with # are considered comments
String comment_regex = &quot;^#.*&quot;;
boolean valid_test = !testcase_name.matches(comment_regex);
vars.put(&quot;valid_test&quot;,Boolean.toString(valid_test));
return valid_test;</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If end of file not reached yet" enabled="true">
            <stringProp name="IfController.condition">&quot;${testcase_name}&quot; != &quot;END&quot; &amp;&amp; &quot;${valid_test}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Print in the console the test number and its name" enabled="true">
              <stringProp name="BeanShellSampler.query">
print(&quot;Now the test-case no ${testcase_no} with name ${testcase_name} is executing...&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="===&gt;&gt;&gt; Execute test case no ${testcase_no} ${testcase_name}" enabled="true">
              <stringProp name="BeanShellSampler.query">
vars.put(&quot;current&quot;,&quot;1&quot;);
vars.put(&quot;current_step&quot;,&quot;INIT&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While current step is not equal DONE - test is not finished yet" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${current_step}&quot; != &quot;DONE&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Compose step content" enabled="true">
                <stringProp name="BeanShellSampler.query">
String current_step_number = &quot;S${current}&quot;;
String step_value = vars.get(current_step_number);
vars.put(&quot;current_step&quot;,step_value);

String current_value_number = &quot;V${current}&quot;;
String value_value = vars.get(current_value_number);
vars.put(&quot;current_value&quot;,value_value);

print(&quot;Current step: &quot; + step_value);
print(&quot;Current value: &quot; + value_value);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = OPEN_BROWSER" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;OPEN_BROWSER&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="-1404464621">OPEN_BROWSER</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = GO_TO_WEBSITE" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;GO_TO_WEBSITE&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="-1332502930">GO_TO_WEBSITE</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = CLOSE_BROWSER" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;CLOSE_BROWSER&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="-1841894495">CLOSE_BROWSER</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = LOGIN" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;LOGIN&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="72611657">LOGIN</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = LOGOUT" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;LOGOUT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="-2043999862">LOGOUT</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = ADD_COMMENT" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;ADD_COMMENT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="63048833">ADD_COMMENT</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = MY_SITE_PAGE" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;MY_SITE_PAGE&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="1128369588">MY_SITE_PAGE</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = COMMENT_OPTION" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;COMMENT_OPTION&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="403229301">COMMENT_OPTION</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = MODIFY_VISIBILITY" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;MODIFY_VISIBILITY&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="-608772169">MODIFY_VISIBILITY</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = CHECK_VISIBILITY" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;CHECK_VISIBILITY&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="-1367402807">CHECK_VISIBILITY</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = CHECK_COMMENT" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;CHECK_COMMENT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="120301032">CHECK_COMMENT</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If step = ACCEPT_BUTTON" enabled="true">
                <stringProp name="IfController.condition">&quot;${current_step}&quot; == &quot;ACCEPT_BUTTON&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <stringProp name="BeanShellSampler.query"></stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Executing ${current_step} with value ${current_value}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="634176331">Modules - keep disabled</stringProp>
                    <stringProp name="-460081591">ACCEPT_BUTTON</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Increment current ${current}. step number" enabled="true">
                <stringProp name="BeanShellSampler.query">
return ${__intSum(${current},1,current)};</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
